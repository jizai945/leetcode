# 503. 下一个更大元素 II
# 给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。

# 示例 1:

# 输入: [1,2,1]
# 输出: [2,-1,2]
# 解释: 第一个 1 的下一个更大的数是 2；
# 数字 2 找不到下一个更大的数； 
# 第二个 1 的下一个最大的数需要循环搜索，结果也是 2。
# 注意: 输入数组的长度不会超过 10000。

# 通过次数68,942提交次数112,062

# 可以遍历一次数组，如果元素是单调递减的（则他们的「下一个更大元素」相同），
# 我们就把这些元素保存，直到找到一个较大的元素；把该较大元素逐一跟保存了的元素比较，
# 如果该元素更大，那么它就是前面元素的「下一个更大元素」。

# 本题应该用个「单调递减栈」来实现。

# 建立「单调递减栈」，并对原数组遍历一次：

# 如果栈为空，则把当前元素放入栈内；
# 如果栈不为空，则需要判断当前元素和栈顶元素的大小：
# 如果当前元素比栈顶元素大：说明当前元素是前面一些元素的「下一个更大元素」，则逐个弹出栈顶元素，直到当前元素比栈顶元素小为止。
# 如果当前元素比栈顶元素小：说明当前元素的「下一个更大元素」与栈顶元素相同，则把当前元素入栈。


class Solution:
    def nextGreaterElements(self, nums: List[int]) -> List[int]:
        
        A = len(nums)
        res = [-1] * A
        stack = []

        for i in range(A*2):
            while stack and nums[stack[-1]] < nums[i % A]:
                res[stack.pop()] = nums[i % A]
            stack.append(i % A)
        return res